{"version":3,"sources":["utilities/alarm-functions.ts","components/SettingsForm.tsx","components/SnoozeForm.tsx","components/TimeDisplay.tsx","components/Timer.tsx","components/Timers.tsx","components/TimerAlertPrompt.tsx","components/TimerBox.tsx","index.tsx"],"names":["store","window","localStorage","alarm_functions_localStorage","getItem","key","setItem","value","toString","clear","removeItem","Object","defineProperty","setStorageItem","storage","e","getStorageItem","components_SettingsForm","_super","SettingsForm","props","_this","call","this","formOptions","idx","react","length","state","__assign","initialState","updateEntry","bind","submitEntry","resetState","__extends","prototype","entryTitle","entryPresetTargetTime","entryHours","entryMinutes","entryCycleSelect","active","newObj","assign","setState","evt","newVal","currentTarget","name","parseInt","preventDefault","Error","countHours","countMinutes","entryCycleList","slice","setTimer","render","setSelectOptions","maxCount","stepCount","optionTags","ii","push","setSelectOptionsHours","setSelectOptionsMinutes","stepCountMinutes","timeProps","required","onChange","entryTitleExists","countDownChars","titleCount","Form","onSubmit","horizontal","className","FormGroup","controlId","Col","xs","sm","md","componentClass","ControlLabel","type","id","placeholder","titleTemp","maxLength","size","autoFocus","style","display","data-type","map","cycle","xsOffset","smOffset","mdOffset","components_SnoozeForm","SnoozeForm","snoozeTime","updateSnooze","setLocalSnooze","SnoozeForm_extends","setSnooze","Array","from","i","entry","components_TimeDisplay","TimeDisplay","secondsElapsed","interval","tTimeDisplay","tick","TimeDisplay_extends","tDateDiff","tDateHr","tDateMin","tDateSec","tmpTimeDisplay","showSeconds","targetTime","Date","now","componentDidMount","setInterval","componentWillUnmount","clearInterval","components_Timer","Timer","toggleTimeout","removeTimer","Timer_extends","timerTDs","timeoutEntry","timeoutList","find","elem","timerDisplayEntry","timerDisplayList","timer","timeDisplay","destination","timerIsX2b","title","substr","timerTitleDone","opacity","href","target","timeOfDay","colSpan","checked","onClick","Glyphicon","glyph","components_Timers","Timers","showAppLinks","toggleOurApps","Timers_extends","newShowStat","timerList","Table","responsive","components_TimerAlertPrompt","TimerAlertPrompt","timerSnooze","timerReset","timerDisable","TimerAlertPrompt_extends","shouldComponentUpdate","nextProps","nextState","modalTimerId","_a","show","modalTitle","cycleName","timerEntryTime","isTimer","nowModalTitle","timerEntry","presetTargetTime","alarmMsg","modalProps","onHide","Modal","TimerAlertPrompt_assign","Body","Button","bsStyle","resetModal","components_TimerBox","TimerBox","storedSnoozeTime","stateSnoozeTime","storedShowSeconds","stateShowSeconds","toLocaleLowerCase","storedTimerList","stateTimerList","JSON","parse","timeoutQueue","showModal","currentTimerId","timeoutMax","setTimerCallback","updateTimer","addRemoveTimeout","getLastId","deleteTimeout","createTimeout","showNotification","getTimeDiff","getTimeDiffUpdate","addToTimeoutQueue","removeFromTimeoutQueue","checkTimeoutQueue","setNotification","TimerBox_extends","initializeState","setAlarms","forEach","setTimeout","componentWillReceiveProps","ourExpirationItems","expiredId","nPxId","handleAppUpdate","whichEvent","expiredId_1","useEvent","internalUseId","internalTimerItem","item","entryCycle","removeAllTimers","entryId","newTimerList","newItem","internalTimerItemIdx","findIndex","splice","stringify","updateTimerCallback","entryHoursPad","entryMinutesPad","lastIdx","nextId","concat","filter","timerItem","refreshAlarms","timerId","refreshList","timerIdx","whichTask","updateTimeout","clearall","timeoutTimerId","newTimeoutList","newTimerDisplayList","clearTimeout","newTimeout","newTimeoutEntry","newTimerDisplayEntry","thisTimeDiff","thisTimeDiffMax","timerPresetTargetTime","timerHour","split","timerMinute","timerCycle","isSnooze","thisTimeDiffUpdate","thisTimeoutWait","thisTimeoutWaitMax","tmpTimerOldId","tmpTimeoutQueue","tHour","tMinute","tmpDate","timerDate","getDate","addDate","addHours","addMinutes","currentMinutes","getMinutes","setMilliseconds","setSeconds","setMinutes","setHours","getHours","setDate","getTime","onOff","newTimerList_1","thisEntryId","updatePassiveNotification","prefs","prefNotification","alert","triggerAlarm","SettingsFormProps","sClass","allowTimers","showPanel","children","Row","TimerBox_assign","reduce","agg","curObj","lastId","src_App","App","src_extends","reRender","react_dom","ourExpirations","currentItems","getPrefs","document","getElementById","getPopup","domApplyTo","fetchAsync","getUrl","fetch","method","sent","text","initParser","DOMParser","applyPrefs","x2bApplyTo","querySelector","then","prefData","popupPrefsScript","domTopBoxH1","domTopBoxH1Parent","docAbout","prefsData","trim","docPrefs","parseFromString","div1","querySelectorAll","div2","appendChild","createElement","src","async","parentNode","insertBefore","nextSibling","catch","console","log","error","data","popupScript","dataLeftIdx","indexOf","dataRightIdx","newData","substring","doc"],"mappings":"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","file":"static/js/main.eadf2f55.chunk.js","sourcesContent":["/*\n    Storage (local; client-side [window])\n    https://developer.mozilla.org/en-US/docs/Web/API/Storage\n*/\n\n/*  STORAGE MOCKUP FOR TESTING (jsdom)  */\n\nif (typeof(window.localStorage) === 'undefined' || window.localStorage === null) {\n\n    // For Testing: Apparently you can disregard the TypeScript errors.\n\n    interface LocalStorageState {\n        [key: string]: string;\n    }\n\n    var localStorage = (function () {\n        let store: LocalStorageState;\n        return {\n            getItem: function (key: string) {\n                return store[key];\n            },\n            setItem: function (key: string, value: string) {\n                store[key] = value.toString();\n            },\n            clear: function () {\n                store = {};\n            },\n            removeItem: function (key: string) {\n                delete store[key];\n            }\n        };\n    })();\n    Object.defineProperty(window, 'localStorage', { value: localStorage });\n}\n\n/*  STORAGE FUNCTIONS  */\n\nexport const setStorageItem = (storage: Storage, key: string, value: string) => {\n    try {\n        storage.setItem(key, value);\n    } catch (e) {\n        // console.error(e)\n    }\n};\n\nexport const getStorageItem = (storage: Storage, key: string) => {\n    try {\n        return storage.getItem(key);\n    } catch (e) {\n        // console.error(e)\n        return null;\n    }\n};\n\nexport const clearStorageItem = (storage: Storage, key: string) => {\n    try {\n        return storage.removeItem(key);\n    } catch (e) {\n        // console.error(e)\n        return null;\n    }\n};\n","import * as React from 'react';\n\nimport { Form, FormGroup, Col, ControlLabel } from 'react-bootstrap';\n\ninterface SettingsFormState {\n    entryTitle: string;\n    entryPresetTargetTime: number;\n    entryHours: number;\n    entryMinutes?: number;\n    entryCycleSelect?: number; // [daily|hourly|every minute]\n    active?: boolean;\n}\n\ninterface SettingsFormProps {\n    titleCount: number;\n    titleTemp: string;\n    countHours: number;\n    countMinutes: number;\n    stepCountMinutes: number;\n    entryCycleList: string[];\n    setTimer: (\n        entryTitle: string,\n        entryPresetTargetTime: number,\n        entryHours: number,\n        entryMinutes: number,\n        entryCycle: number\n    ) => void;\n}\n\nclass SettingsForm extends React.Component<SettingsFormProps, SettingsFormState> {\n    // public static propTypes = {\n    //     // refreshWidgets: React.PropTypes.func.isRequired,\n    //     // widgets: React.PropTypes.arrayOf(\n    //     //         React.PropTypes.instanceOf((Widget))).isRequired,\n    //     entry : React.PropTypes.object.isRequired,\n    //     editId : React.PropTypes.number.isRequired,\n    //     yieldRouteHistoryBlock : React.PropTypes.bool.isRequired,\n    //     editEntry : React.PropTypes.func.isRequired,\n    //     editEntryCancel : React.PropTypes.func.isRequired,\n    //     deleteEntry : React.PropTypes.func.isRequired\n    // };\n    // public static defaultProps = {\n    //     // widgets: [],\n    // };\n    constructor(props: SettingsFormProps) {\n        super(props);\n\n        this.state = { ...this.initialState() };\n\n        this.updateEntry = this.updateEntry.bind(this);\n        this.submitEntry = this.submitEntry.bind(this);\n        this.resetState = this.resetState.bind(this);\n    }\n    initialState() {\n        return {\n            entryTitle: '',\n            entryPresetTargetTime: 0,\n            entryHours: 0,\n            entryMinutes: 0,\n            entryCycleSelect: 0, // [daily|hourly|every minute]\n            active: false\n        };\n    }\n    resetState() {\n        const newObj = Object.assign({}, {...this.state}, {...this.initialState()});\n        this.setState( newObj );\n    }\n    updateEntry(evt: React.SyntheticEvent<HTMLSelectElement> | React.SyntheticEvent<HTMLInputElement>) {\n        const targetName = evt.currentTarget.name;\n\n        let newVal;\n\n        // newVal = evt.currentTarget.dataset.type === 'number'\n        // ? parseInt(evt.currentTarget.value, 10) : evt.currentTarget.value,\n        switch (targetName) {\n            case 'entryTitle':\n                newVal = evt.currentTarget.value;\n                this.setState({ entryTitle: newVal });\n                break;\n            case 'entryHours':\n                newVal = parseInt(evt.currentTarget.value, 10);\n                this.setState({ entryHours: newVal });\n                break;\n            case 'entryMinutes':\n                newVal = parseInt(evt.currentTarget.value, 10);\n                this.setState({ entryMinutes: newVal });\n                break;\n            case 'entryCycleSelect':\n                newVal = parseInt(evt.currentTarget.value, 10);\n                this.setState({ entryCycleSelect: newVal });\n                break;\n            default:\n                break;\n        }\n        // this.setState({ [targetName]: newVal });\n    }\n    submitEntry(evt: React.SyntheticEvent<Form>) {\n        evt.preventDefault();\n\n        if ( typeof(this.state.entryTitle) !== 'string' || this.state.entryTitle.length === 0 ) {\n            throw new Error('A [Title] is required');\n        } else if (\n                (typeof(this.state.entryHours) !== 'number' || typeof(this.state.entryMinutes) !== 'number') ||\n                (this.state.entryHours < 0 || this.state.entryHours >= this.props.countHours) ||\n                (this.state.entryMinutes < 0 || this.state.entryMinutes >= this.props.countMinutes)\n            ) {\n            throw new Error('Invalid time set: It should be [0-' +\n                            (this.props.countHours - 1) + ']:[0-' +\n                            (this.props.countMinutes - 1) + ']');\n        } else if (\n                (typeof(this.state.entryCycleSelect) !== 'number') ||\n                (this.state.entryCycleSelect < 0 || this.state.entryCycleSelect >= this.props.entryCycleList.length)\n            ) {\n            throw new Error('Invalid Cycle: It should be one of [' + [...this.props.entryCycleList] + ']');\n        } else {\n\n            // FORM DATA IS GOOD\n\n            // -- Send form data back to parent component callback\n            this.props.setTimer(\n                this.state.entryTitle,\n                this.state.entryPresetTargetTime,\n                this.state.entryHours,\n                this.state.entryMinutes,\n                this.state.entryCycleSelect);\n\n            // -- Reset local state\n            this.resetState();\n        }\n    }\n    formOptions = (idx: number) => {\n            // Pre-ES8 (Pre-ES2017)\n            // <option key={idx} value={idx}>{idx.toString().length === 1 ? '0'+idx : idx}</option>\n            // ES8 (ES2017) - Couldn't get to work with Jest/Testing\n            // <option key={idx} value={idx}>{idx.toString().padStart(2, '0')}</option>\n        return (\n            <option key={idx} value={idx}>{idx.toString().length === 1 ? '0' + idx : idx}</option>\n        );\n    }\n    render() {\n        const setSelectOptions = (maxCount: number, stepCount = 1) => {\n                let optionTags = [];\n                for (let ii = 0; ii < maxCount; ii += stepCount) {\n                    optionTags.push( this.formOptions(ii) );\n                }\n                return optionTags;\n            },\n            setSelectOptionsHours = setSelectOptions( this.props.countHours ),\n            setSelectOptionsMinutes = setSelectOptions( this.props.countMinutes, this.props.stepCountMinutes ),\n            timeProps = {\n                required: true,\n                onChange: this.updateEntry\n                // onChange: (e) => this.updateEntry(e)\n            },\n            entryTitleExists = this.state.entryTitle,\n            countDownChars = (this.props.titleCount - (entryTitleExists ? entryTitleExists.length : 0));\n\n        return (\n            <Form onSubmit={this.submitEntry} horizontal={true}>\n                <h2 className=\"hidden\">Create a Timer</h2>\n                <FormGroup controlId=\"formHorizontalTimerTitle\">\n                    <Col xs={5} sm={4} md={5} componentClass={ControlLabel}>\n                        Timer Title <small>({countDownChars} chars)</small>\n                    </Col>\n                    <Col xs={7} sm={8} md={7}>\n                        <input\n                            type=\"text\"\n                            id=\"entryTitle\"\n                            name=\"entryTitle\"\n                            {...timeProps}\n                            value={this.state.entryTitle}\n                            placeholder={this.props.titleTemp}\n                            maxLength={this.props.titleCount}\n                            size={this.props.titleCount}\n                            autoFocus={true}\n                            // { ref=\"textInput\" }\n                            // ref={(input) => { this.textInput = input; }}\n                        />\n                    </Col>\n                </FormGroup>\n                <FormGroup controlId=\"formHorizontalTimerTime\" className=\"formHorizontalTimerTime\">\n                    <Col xs={5} sm={4} md={5} componentClass={ControlLabel}>\n                        Time <small>(hrs/ mins/ cycle)</small>\n                    </Col>\n                    <Col xs={7} sm={8} md={7}>\n                            <label style={{display: 'none'}}>Time <small>(hrs/ mins/ cycle)</small></label>\n                            <select\n                                id=\"entryTimeHr\"\n                                name=\"entryHours\"\n                                data-type=\"number\"\n                                {...timeProps}\n                                value={this.state.entryHours}\n                                size={1}\n                            >\n                                {setSelectOptionsHours}\n                            </select>\n                            <label style={{display: 'none'}}>Minutes</label>\n                            <select\n                                id=\"entryTimeMin\"\n                                name=\"entryMinutes\"\n                                data-type=\"number\"\n                                {...timeProps}\n                                value={this.state.entryMinutes}\n                                size={1}\n                            >\n                                {setSelectOptionsMinutes}\n                            </select>\n                            <label style={{display: 'none'}}>Cycle</label>\n                            <select\n                                id=\"entryTimeCycle\"\n                                name=\"entryCycleSelect\"\n                                data-type=\"number\"\n                                {...timeProps}\n                                value={this.state.entryCycleSelect}\n                                size={1}\n                            >\n                                {this.props.entryCycleList.map( (cycle, idx) =>\n                                    <option key={idx} value={idx}>{cycle}</option>\n                                )}\n                            </select>\n                    </Col>\n                </FormGroup>\n                <FormGroup>\n                    <Col xsOffset={5} xs={7} smOffset={4} sm={8} mdOffset={5} md={7} className=\"add-button-div\">\n                        <div className=\"label hidden\">Add It!!!</div>\n                        <button id=\"entryButton\" className=\"btn\">Add Your Timer</button>\n                    </Col>\n                </FormGroup>\n            </Form>\n        );\n    }\n}\n\nexport default SettingsForm;","import * as React from 'react';\n\ninterface SnoozeFormState {\n    snoozeTime: number;\n}\n\ninterface SnoozeFormProps {\n    snoozeTime: number;\n    setSnooze: (snoozeTime: number) => void;\n}\n\nclass SnoozeForm extends React.Component<SnoozeFormProps, SnoozeFormState> {\n    constructor(props: SnoozeFormProps) {\n        super(props);\n        this.state = {\n            snoozeTime: this.props.snoozeTime\n        };\n        this.updateSnooze = this.updateSnooze.bind(this);\n        this.setLocalSnooze = this.setLocalSnooze.bind(this);\n    }\n    setLocalSnooze(evt: React.SyntheticEvent<HTMLSelectElement>) {\n        this.setState({ snoozeTime: parseInt(evt.currentTarget.value, 10) }, this.updateSnooze);\n    }\n    updateSnooze() {\n        this.props.setSnooze(this.state.snoozeTime);\n    }\n    render() {\n        return (\n            <select onChange={this.setLocalSnooze} value={this.state.snoozeTime}>\n                { Array.from(Array(15), (e, i) => (i + 1)).map((entry, idx) => {\n                    return (\n                        <option key={idx}>{entry}</option>\n                    );\n                }) }\n            </select>\n        );\n    }\n}\n\nexport default SnoozeForm;","import * as React from 'react';\n\ninterface TimeDisplayState {\n    secondsElapsed: number;\n    interval: number;\n    tTimeDisplay: string;\n}\n\ninterface TimeDisplayProps {\n    targetTime: number;\n    showSeconds: boolean;\n}\n\nclass TimeDisplay extends React.Component<TimeDisplayProps, TimeDisplayState> {\n    constructor(props: TimeDisplayProps) {\n        super(props);\n        this.state = {\n            secondsElapsed: 0,\n            interval: -1,\n            tTimeDisplay: ''\n        };\n        this.tick = this.tick.bind(this);\n    }\n    tick() {\n        // this.setState({secondsElapsed: this.state.secondsElapsed + 1})\n        let tDateDiff: number,\n            tDateHr,\n            tDateMin,\n            tDateSec,\n            tmpTimeDisplay,\n            showSeconds = false;\n\n        if (this.props.targetTime === 0) {\n            this.setState({ tTimeDisplay: '' });\n        } else {\n            tDateDiff = (this.props.targetTime - Date.now());\n            // tDateMin = Math.floor(tDateDiff / 60000)\n            // tDateSec = ((tDateDiff % 60000) / 1000).toFixed(0)\n\n            // tDateSec = (tDateDiff / 1000) % 60;\n            // tDateMin = (tDateDiff / (1000 * 60)) % 60;\n            // tDateHr = (tDateDiff / (1000 * 60 * 60)) % 24;\n            tDateSec = parseInt(((tDateDiff / 1000) % 60).toString(), 10);\n            tDateMin = parseInt(((tDateDiff / (1000 * 60)) % 60).toString(), 10);\n            tDateHr = parseInt(((tDateDiff / (1000 * 60 * 60))).toString(), 10);\n\n            tDateHr = (tDateHr <= 0) ? 0 : tDateHr;\n            tDateMin = (tDateMin <= 0) ? 0 : tDateMin;\n            tDateSec = (tDateSec <= 0) ? 0 : tDateSec;\n\n            showSeconds = (tDateHr === 0 && tDateMin === 0) || this.props.showSeconds;\n\n            tDateHr = (tDateHr < 10) ? '0' + tDateHr : tDateHr;\n            tDateMin = (tDateMin < 10) ? '0' + tDateMin : tDateMin;\n            tDateSec = (tDateSec < 10) ? '0' + tDateSec : tDateSec;\n\n            // return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds\n            // return (seconds == 60 ? (minutes+1) + \":00\" : minutes + \":\" + (seconds < 10 ? '0' : '') + seconds)\n\n            if (!showSeconds) {\n                tmpTimeDisplay = tDateHr + ':' + tDateMin;\n            } else {\n                tmpTimeDisplay = tDateHr + ':' + tDateMin + ':' + tDateSec;\n            }\n\n            this.setState({ tTimeDisplay: tmpTimeDisplay });\n            // this.setState({ tTimeDisplay: tDateHr + ':' + tDateMin + ':' + (tDateSec < 10 ? '0' : '') + tDateSec })\n            // this.setState({ tTimeDisplay: 'S:' + parseInt(tDateDiff/1000).toString() })\n        }\n    }\n    componentDidMount() {\n        // Should there be a 'clearInterval' prior to setting a new one (same as what is run in 'componentWillUnmount')?\n            // Although I know it's not in the instance state anymore (that's been replaced),\n            // but is the previous setInterval still counting in memory?\n        this.setState({ interval: window.setInterval(this.tick, 1000) });\n    }\n    componentWillUnmount() {\n        clearInterval(this.state.interval);\n    }\n    render() {\n        return (\n            <span className=\"nowrap\">{this.state.tTimeDisplay.length > 0 ? 'T-' + this.state.tTimeDisplay : ''}</span>\n        );\n    }\n}\n\nexport default TimeDisplay;","import * as React from 'react';\n\nimport { Glyphicon } from 'react-bootstrap';\n\nimport TimeDisplay from './TimeDisplay';\n\ninterface EntryProps {\n    id: number;\n    title: string;\n    timeOfDay: string;\n    cycle: number;\n    active: boolean;\n}   // from TimerBox: interface TimerListInterface {}\n\ninterface TimeoutListState {\n    id: number;\n    timer: number;\n}\n\ninterface TimerDisplayListState {\n    id: number;\n    destination: number;\n}\n\ninterface TimerProps {\n    entry: EntryProps;\n    timeoutList: TimeoutListState[];                  // A list of active timers -- with Timeout ID: { id: 0, timer: 0 }\n    timerDisplayList: TimerDisplayListState[];        // 1-second timeouts that update set (stateless) <TimeDisplay />s.\n    entryCycleList: string[];                         // ['daily','hourly','every minute'],\n    showSeconds: boolean;\n    toggleTimeout: (timerId: number, onOff: string) => void;    // toggleTimeout(timerId: number, onOff: string) {\n    removeTimer: (timerId: number) => void;                     // removeTimer(timerId: number) {\n}\n\nclass Timer extends React.Component<TimerProps, {}> {\n    constructor(props: TimerProps) {\n        super(props);\n        this.toggleTimeout = this.toggleTimeout.bind(this);\n        this.removeTimer = this.removeTimer.bind(this);\n        this.toggleTimeout = this.toggleTimeout.bind(this);\n        this.removeTimer = this.removeTimer.bind(this);\n    }\n    toggleTimeout() {\n        this.props.toggleTimeout(this.props.entry.id, this.props.entry.active ? 'off' : 'on');\n    }\n    removeTimer() {\n        this.props.removeTimer(this.props.entry.id);\n    }\n    render() {\n        // const { Glyphicon } = ReactBootstrap\n\n        const timeoutEntry = this.props.timeoutList.find( (elem) => elem.id === this.props.entry.id),\n              timerDisplayEntry = (timeoutEntry) ? this.props.timerDisplayList.find(\n                  (elem: {id: number}) => elem.id === timeoutEntry.timer) : null,\n              timeDisplay = (timerDisplayEntry) ? timerDisplayEntry.destination : 0,\n              timerIsX2b = this.props.entry.title.substr(0, 4) === 'x2b-',\n              timerTitleDone = (\n                    <small style={{ opacity: 0.5 }}>This is a&nbsp;\n                        <a\n                            href=\"https://kdcinfo.github.io/done-for-now/\"\n                            target=\"kdcNewWindow\"\n                            // style={{ opacity: 0.5 }}\n                        >Done (for now)\n                        </a> timer\n                    </small>\n                );\n        let timerTDs;\n\n        if (timerIsX2b) {\n            timerTDs = (\n                <React.Fragment>\n                    <td>{this.props.entry.title}</td>\n                    <td>{this.props.entry.timeOfDay}</td>\n                    <td className=\"hidden\">{this.props.entryCycleList[this.props.entry.cycle]}</td>\n                </React.Fragment>\n            );\n        } else {\n            timerTDs = (\n                <React.Fragment>\n                    <td>{this.props.entry.title}</td>\n                    <td colSpan={2}>{timerTitleDone}</td>\n                </React.Fragment>\n            );\n        }\n\n// const { username, url } = this.propos.gist,\n//       userurl = (url === noGistMsg) ? noGistMsg : <a href={}>{}</a>;\n\n        return (\n            <tr>\n                {timerTDs}\n                <td className=\"hidden text-center\">\n                    <input\n                        onChange={this.toggleTimeout}\n                        type=\"checkbox\"\n                        value={this.props.entry.id}\n                        checked={this.props.entry.active}\n                    />\n                </td>\n                <td className=\"text-center\">\n                    <TimeDisplay targetTime={timeDisplay} showSeconds={this.props.showSeconds} />\n                </td>\n                <td className=\"hidden\">\n                    <button\n                        className=\"btn btn-xs\"\n                        onClick={this.removeTimer}\n                    >\n                        <Glyphicon glyph=\"remove\" />\n                    </button>\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default Timer;","import * as React from 'react';\n\nimport { Table } from 'react-bootstrap';\n\nimport Timer from './Timer';\n\ninterface TimerListState {\n    id: number;\n    title: string;\n    timeOfDay: string;\n    cycle: number;\n    active: boolean;\n}\n\ninterface TimeoutListState {\n    id: number;\n    timer: number;\n}\n\ninterface TimerDisplayListState {\n    id: number;\n    destination: number;\n}\n\ninterface TimersProps {\n    removeTimer: (timerId: number) => void;                  // removeTimer(timerId: number) {\n    toggleTimeout: (timerId: number, onOff: string) => void; // toggleTimeout(timerId: number, onOff: string) {\n    timerList: TimerListState[];\n    timeoutList: TimeoutListState[];\n    timerDisplayList: TimerDisplayListState[];\n    entryCycleList: string[];\n    showSeconds: boolean;\n}\n\ninterface TimersState {\n    showAppLinks: string;\n}\n\nclass Timers extends React.Component<TimersProps, TimersState> {\n    constructor(props: TimersProps) {\n        super(props);\n        this.state = {\n            showAppLinks: ''\n        };\n        this.toggleOurApps = this.toggleOurApps.bind(this);\n    }\n    toggleOurApps() {\n        let newShowStat = (this.state.showAppLinks.length === 0) ? ' showdown' : '';\n        this.setState({ showAppLinks: newShowStat });\n    }\n    render() {\n        if (this.props.timerList.length > 0) {\n            return (\n                <div className=\"timers-div\">\n                    <Table responsive={true}>\n                        <thead>\n                            <tr>\n                                <th><span>Internal Alarm ID </span>\n                                    <sup className=\"ourAppsTrigger\" onClick={this.toggleOurApps}>?</sup>\n                                    <div className={'ourAppsDisplay' + this.state.showAppLinks}>\n                                        <div>\n                                            <span>\n                                                <a\n                                                    href=\"https://KDCinfo.github.io/expired-to-be/\"\n                                                    onClick={(e) => { e.preventDefault(); return false; }}\n                                                >Expired To Be\n                                                </a> (Alarms)\n                                            </span><br/>\n                                            <span>\n                                                <a\n                                                    href=\"https://kdcinfo.github.io/done-for-now/\"\n                                                    target=\"kdcNewWindow\"\n                                                >Done (for now)\n                                                </a> (Timers)\n                                            </span>\n                                        </div>\n                                    </div>\n                                </th>\n                                <th>Notify Time</th>\n                                <th className=\"hidden\">Cycle</th>\n                                <th className=\"hidden\">On/Off</th>\n                                <th className=\"text-center\">Hrs:Mins Left</th>\n                                <th className=\"hidden\">Del</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            { this.props.timerList.map( (entry, idx: number) =>\n                                <Timer\n                                    key={idx}\n                                    entry={entry}\n                                    timeoutList={this.props.timeoutList}\n                                    timerDisplayList={this.props.timerDisplayList}\n                                    entryCycleList={this.props.entryCycleList}\n                                    toggleTimeout={this.props.toggleTimeout}\n                                    removeTimer={this.props.removeTimer}\n                                    showSeconds={this.props.showSeconds}\n                                />\n                            )}\n                        </tbody>\n                    </Table>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"timer-list-no-alarms\">You have no active alarms...</div>\n            );\n        }\n    }\n}\n\nexport default Timers;","import * as React from 'react';\n\nimport { Button, Modal } from 'react-bootstrap';\n\ninterface TimerListProps {\n    id: number;\n    title: string;\n    presetTargetTime: number;\n    timeOfDay: string;\n    cycle: number;\n    active: boolean;\n}\n\ninterface ModalProps {\n    timerList: TimerListProps[];\n    snoozeTime: number; // stateSnoozeTime,\n    entryCycleList: string[];\n    show: boolean;\n    modalTitle: string;\n    modalTimerId: number;\n    alarmMsg: string;\n    timerSnooze: (entryId: number) => void;\n    timerReset: (entryId: number) => void;\n    timerDisable: (entryId: number) => void;\n    resetModal: () => void;\n}\n\nclass TimerAlertPrompt extends React.Component<ModalProps, {}> {\n\n   // export default class TimerAlertPrompt extends React.Component {}\n        // https://cdnjs.cloudflare.com/ajax/libs/react/15.5.4/react.min.js\n        // https://cdnjs.cloudflare.com/ajax/libs/react/15.5.4/react-dom.min.js\n        // https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.24.0/babel.min.js\n\n        // https://cdnjs.cloudflare.com/ajax/libs/react-bootstrap/0.31.0/react-bootstrap.js\n        // import { Modal, Button, Glyphicon } from 'react-bootstrap'\n\n    constructor(props: ModalProps) {\n        super(props);\n\n        this.timerSnooze = this.timerSnooze.bind(this);\n        this.timerReset = this.timerReset.bind(this);\n        this.timerDisable = this.timerDisable.bind(this);\n    }\n    shouldComponentUpdate(nextProps: any, nextState: any) {\n        return this.props !== nextProps;\n    }\n    timerSnooze() {\n        this.props.timerSnooze(this.props.modalTimerId);\n\n        // @TODO: Disable should delete alarm when it's tied to an Expiration item, and not a Timer.\n\n    }\n    timerReset() {\n        this.props.timerReset(this.props.modalTimerId);\n    }\n    timerDisable() {\n        this.props.timerDisable(this.props.modalTimerId);\n    }\n    render() {\n        // const { show, user, hideDelete, userDelete } = this.props;\n        // const Modal = ReactBootstrap.Modal\n        // const Button = ReactBootstrap.Modal\n        // const Glyphicon = ReactBootstrap.Modal\n        // const { Modal, Button, Glyphicon } = 'react-bootstrap'\n        // const { Modal, Button } = ReactBootstrap\n        const { show, modalTitle } = this.props;\n\n        // id, timeOfDay, cycleName\n\n        let cycleName = '',\n            timerEntryTime = '',\n            isTimer = false,\n            nowModalTitle = modalTitle;\n\n        const timerEntry = this.props.timerList.find( (elem) => (elem.id === this.props.modalTimerId) );\n\n        if (timerEntry) {\n            timerEntryTime = timerEntry.timeOfDay;\n            cycleName = this.props.entryCycleList[timerEntry.cycle];\n            if (timerEntry.presetTargetTime === 0) {\n                isTimer = true;\n            } else {\n                nowModalTitle = this.props.alarmMsg;\n            }\n        }\n\n        const DivTitle = () => (\n                <div className=\"modal-title\">{nowModalTitle}</div>\n              ),\n              DivSubtitle = () => (\n                <div className=\"modal-subtitle\">[{timerEntryTime}]&nbsp;[{cycleName}]</div>\n              ),\n              ButtonSnooze = () => (\n                <Button onClick={this.timerSnooze} bsStyle=\"warning\">\n                    Snooze <small><small>({this.props.snoozeTime} min)</small></small>\n                </Button>\n              ),\n              ButtonDoneForNow = () => {\n                return (\n                    <Button onClick={this.timerReset} bsStyle=\"success\">\n                        Done <small><small>(for now)</small></small>\n                    </Button>\n                );\n              },\n              ButtonCloseModal = () => {\n                return (\n                    <Button onClick={this.props.resetModal} bsStyle=\"success\">\n                        Expiration Alert!\n                    </Button>\n                );\n              },\n              ButtonDisable = () => (\n                <Button onClick={this.timerDisable} bsStyle=\"default\">\n                    Disable\n                </Button>\n              );\n\n        const modalProps = {\n            show: show,\n            className: 'modal-alert',\n            onHide: () => undefined,\n        };\n        return (\n            <Modal {...modalProps}>\n                <Modal.Body>\n                    {isTimer ? (<ButtonSnooze />) : null}\n                    {isTimer ? (<DivTitle />) : null}\n                    {isTimer ? (<ButtonDoneForNow />) : null}\n                    {isTimer ? null : (<ButtonCloseModal />)}\n                    {isTimer ? (<DivSubtitle />) : null}\n                    {isTimer ? (<ButtonDisable />) : null}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport default TimerAlertPrompt;","import * as React from 'react';\n\nimport { Row, Col } from 'react-bootstrap';\n\nimport { getStorageItem, setStorageItem } from '../utilities/alarm-functions';\n\nimport SettingsForm from './SettingsForm';\nimport SnoozeForm from './SnoozeForm';\nimport Timers from './Timers';\nimport TimerAlertPrompt from './TimerAlertPrompt';\n\n/**\n * [TimerBox] Alarm API Usage Details:\n *\n * https://github.com/KDCinfo/expired-to-be/src\n *\n */\n\n/**\n *\n * All [TypeScript Interfaces] are at the bottom of this file.\n *\n */\n\nclass TimerBox extends React.Component<TimerBoxProps, TimerBoxState> {\n    constructor(props: TimerBoxProps) {\n        super(props);\n\n        const // timeToMidnight = new Date().setHours(24,0,0,0) - new Date().getTime(), // Milliseconds to midnight\n              storedSnoozeTime = getStorageItem(localStorage, 'snoozeTime'),\n              stateSnoozeTime = storedSnoozeTime ? parseInt(storedSnoozeTime, 10) : 60 * 24, // 60 min * 24 hr = 1 day\n              storedShowSeconds = getStorageItem(localStorage, 'showSeconds'),\n              stateShowSeconds = storedShowSeconds ? (storedShowSeconds.toLocaleLowerCase() === 'true') : false,\n              storedTimerList = getStorageItem(localStorage, 'timerList'),\n              stateTimerList = (storedTimerList) ? JSON.parse(storedTimerList) : [];\n\n        this.state = {\n            timerList: stateTimerList,  // A list of timers:\n                                        //     { id: 0, title: '',\n                                        //       presetTargetTime: 0, timeOfDay: '00:00', cycle: 0 }\n            timeoutList: [],            // A list of active timers -- with Timeout ID: { id: 0, timer: 0 }\n                                        // Also includes a list of 'display timers' (sibling setTimeouts).\n            timeoutQueue: [],           // A list of completed timeouts going through the 'modal' process.\n            timerDisplayList: [],       // 1-second timeouts that update set (stateless) <TimeDisplay />s.\n            titleCount: 25,\n            titleTemp: 'Watch my show!',\n            countHours: 24,\n            countMinutes: 60,\n            stepCountMinutes: 5,\n            snoozeTime: stateSnoozeTime,\n            entryCycleList: ['daily', 'hourly', 'every minute'],\n            showModal: false,\n            modalTitle: '',\n            modalTimerId: -1,\n            showSeconds: stateShowSeconds,\n            currentTimerId: 0,\n            alarmMsg: 'An alarm has expired.',\n            timeoutMax: 2073600000 // 2073600000 ms = 576 hours = 24 days (Tested with: 15 * 1000)\n        };\n\n        this.setSnooze = this.setSnooze.bind(this);\n        this.setTimer = this.setTimer.bind(this);\n        this.setTimerCallback = this.setTimerCallback.bind(this);\n        this.updateTimer = this.updateTimer.bind(this);\n        this.addRemoveTimeout = this.addRemoveTimeout.bind(this);\n        this.toggleTimeout = this.toggleTimeout.bind(this);\n        this.removeTimer = this.removeTimer.bind(this);\n        this.getLastId = this.getLastId.bind(this);\n        this.deleteTimeout = this.deleteTimeout.bind(this);\n        this.createTimeout = this.createTimeout.bind(this);\n        this.timerSnooze = this.timerSnooze.bind(this);\n        this.timerReset = this.timerReset.bind(this);\n        this.timerDisable = this.timerDisable.bind(this);\n        this.showNotification = this.showNotification.bind(this);\n        this.getTimeDiff = this.getTimeDiff.bind(this);\n        this.getTimeDiffUpdate = this.getTimeDiffUpdate.bind(this);\n        this.addToTimeoutQueue = this.addToTimeoutQueue.bind(this);\n        this.removeFromTimeoutQueue = this.removeFromTimeoutQueue.bind(this);\n        this.checkTimeoutQueue = this.checkTimeoutQueue.bind(this);\n        this.setNotification = this.setNotification.bind(this);\n        this.resetModal = this.resetModal.bind(this);\n    }\n    initializeState() {\n        // Create new 'timeoutList' from stored 'timerList'\n            // Go through each [timerList] entry and, if 'active', execute addRemoveTimeout(entryId, 'add')\n\n        const storedTimerList = getStorageItem(localStorage, 'timerList'),\n              stateTimerList = (storedTimerList) ? JSON.parse(storedTimerList) : [];\n\n        // 'this.state.timeoutList' should already be empty [] ( per constructor's this.state = {} )\n        // 'this.state.timeoutQueue' should already be empty [] ( per constructor's this.state = {} )\n\n        if (stateTimerList.length > 0) {\n\n            this.props.setAlarms(stateTimerList);\n\n            stateTimerList.forEach( (elem: {id: number, active: boolean, timeOfDay?: string}) => {\n                if (elem.active === true && (typeof(elem.timeOfDay) !== 'undefined')) {\n                    window.setTimeout(                              // Was using `global.setTimeout` (for TS).\n                        () => {                                     // Switched to `window.` for consistency.\n                            this.addRemoveTimeout(elem.id, 'init'); // When these are not staggered, only one\n                        },                                          // shows in the 'timerDisplay' code/layout.\n                        0                                           // setTimeout({}, 0) fixes this by pushing\n                    );                                              // each call to the end of the call stack.\n                }\n            });\n        }\n    }\n    componentDidMount() {\n        this.initializeState();\n    }\n    componentWillReceiveProps(nextProps: any) {\n\n        if (nextProps.ourExpirationItems.length > 0) {\n\n            if (nextProps.ourExpirationItems[0].expiredId !== this.state.currentTimerId) {\n                const nPxId = nextProps.ourExpirationItems[0].expiredId;\n\n                this.setState({ currentTimerId: nPxId }, () => {\n                    this.handleAppUpdate();\n                });\n            }\n        } else {\n            this.setState({ currentTimerId: 0 });\n        }\n    }\n    shouldComponentUpdate(nextProps: any, nextState: any) {\n\n        if (nextProps.ourExpirationItems.length > 0) {\n\n            return (\n                this.state.currentTimerId === 0 || // this.state.currentTimerId === -1 ||\n                this.state.currentTimerId !== nextProps.ourExpirationItems[0].expiredId\n            );\n        } else {\n\n            return this.props !== nextProps ||\n                   this.state.showModal !== nextState.showModal ||\n                   this.state.timeoutList !== nextState.timeoutList;\n        }\n    }\n    handleAppUpdate() {\n\n        if (this.props.ourExpirationItems.length > 0) {\n\n            const { whichEvent, expiredId } = this.props.ourExpirationItems[0];\n\n            let useEvent = whichEvent,\n                internalUseId = 0,\n                internalTimerItem = this.state.timerList.find(\n                    item => parseInt(item.title.substr(4), 10) === expiredId\n                ),\n                entryTitle = '',\n                entryPresetTargetTime = 0,\n                entryHours = 0,\n                entryMinutes = 0,\n                entryCycle = 0;\n\n            if (internalTimerItem) {\n                internalUseId = internalTimerItem.id;\n            }\n\n            if (useEvent === 'add') {\n                // const { entryTitle, entryHours, entryMinutes, entryCycle } = this.props.ourExpirationItems[0];\n                entryTitle = this.props.ourExpirationItems[0].entryTitle;\n                entryPresetTargetTime = this.props.ourExpirationItems[0].entryPresetTargetTime;\n                entryHours = this.props.ourExpirationItems[0].entryHours;\n                entryMinutes = this.props.ourExpirationItems[0].entryMinutes;\n                entryCycle = this.props.ourExpirationItems[0].entryCycle;\n                if (internalTimerItem) {\n                    useEvent = 'update';\n                }\n            }\n\n            // console.log('[handleUpdate] printing... ', whichEvent, expiredId, this.props.ourExpirationItems);\n            // items[] = { whichEvent: 'add|update|remove', expiredId: 0, [expiredWait: #days, expiredSnooze: 1] }\n            //\n            // [entryTitle] is The glue between your [App] and [TimerBox]. 3 char + hyphen + whole number\n            //\n                // whichEvent: \"add\"        // add|remove|update\n                // expiredId: 2             // \\/`^~---> Ties to [entryTitle]\n                // entryTitle: \"x2b-2\"      // !!important\n                // entryPresetTargetTime: 0 // target date in milliseconds\n                // entryHours: 552          // [0|24|48|...] // 552 / 24 = 23 (days)\n                // entryMinutes: 0\n                // entryCycle: 0            // 0: daily // @TODO: allow to override snooze; off|on[daily|hourly]\n\n            switch (useEvent) {\n                case 'add':\n                    this.setTimer( entryTitle, entryPresetTargetTime, entryHours, entryMinutes, entryCycle );\n                    break;\n\n                case 'update':\n                    this.updateTimer(internalUseId,\n                                     entryTitle,\n                                     entryPresetTargetTime,\n                                     entryHours,\n                                     entryMinutes,\n                                     entryCycle);\n                    break;\n\n                case 'remove':\n                    this.removeTimer( internalUseId );\n                    break;\n\n                case 'clearall':\n                    this.removeAllTimers();\n                    break;\n\n                default:\n                    // console.log('handleUpdate: switch: default (purportedly not used)'); // Debugging is done in Dev.\n            }\n        }\n    }\n\n    updateTimer(entryId: number,\n                entryTitle: string,\n                entryPresetTargetTime: number,\n                entryHours: number,\n                entryMinutes: number,\n                entryCycle: number) {\n        let newTimerList = this.state.timerList;\n\n        const entryHoursPad = entryHours < 10 ? '0' + entryHours : entryHours,\n              entryMinutesPad = entryMinutes < 10 ? '0' + entryMinutes : entryMinutes,\n              newItem = {\n                id: entryId,\n                title: entryTitle,\n                presetTargetTime: entryPresetTargetTime,\n                timeOfDay: entryHoursPad + ':' + entryMinutesPad,\n                cycle: entryCycle,\n                active: true\n              },\n              internalTimerItemIdx = newTimerList.findIndex(\n                item => item.id === entryId\n              );\n\n        newTimerList.splice(internalTimerItemIdx, 1, newItem);\n\n        this.setState({ timerList: newTimerList }, () => {\n            setStorageItem(localStorage, 'timerList', JSON.stringify(newTimerList));\n            this.updateTimerCallback(entryId);\n            this.props.setAlarms(this.state.timerList);\n        });\n    }\n    setTimer(entryTitle: string,\n             entryPresetTargetTime: number,\n             entryHours: number,\n             entryMinutes: number,\n             entryCycle: number ) {\n\n        const entryHoursPad = entryHours < 10 ? '0' + entryHours : entryHours,\n              entryMinutesPad = entryMinutes < 10 ? '0' + entryMinutes : entryMinutes,\n              lastIdx = this.getLastId(),\n              nextId = this.state.timerList.length === 0 ? 0 : (lastIdx + 1),\n              timerList = this.state.timerList.concat({\n                  id: nextId,\n                  title: entryTitle,\n                  presetTargetTime: entryPresetTargetTime,\n                  timeOfDay: entryHoursPad + ':' + entryMinutesPad,\n                  cycle: entryCycle,\n                  active: false\n              });\n\n        this.setState({ timerList }, () => {\n            setStorageItem(localStorage, 'timerList', JSON.stringify(timerList));\n            this.setTimerCallback();\n            this.props.setAlarms(this.state.timerList);\n        });\n    }\n    removeAllTimers() {\n\n        let newTimerList = this.state.timerList.slice();\n\n        newTimerList = newTimerList.filter( timerItem => {\n            this.toggleTimeout(timerItem.id, 'off');\n            return timerItem.title.substr(0, 4) !== 'x2b-';\n        });\n\n        this.setState({ timerList: newTimerList }, () => {\n\n            setStorageItem(localStorage, 'timerList', JSON.stringify(newTimerList));\n\n            this.props.setAlarms(this.state.timerList);\n            this.props.refreshAlarms();\n        });\n    }\n    removeTimer(timerId: number, refreshList?: boolean) {\n\n        let newTimerList = this.state.timerList;\n\n        const timerIdx = newTimerList.findIndex(item => item.id === timerId);\n\n        if (timerIdx >= 0) {\n\n            newTimerList.splice(timerIdx, 1);\n\n            this.setState({ timerList: newTimerList }, () => {\n\n                setStorageItem(localStorage, 'timerList', JSON.stringify(newTimerList));\n                this.toggleTimeout(timerId, 'off');\n\n                if (refreshList === true) {\n                    this.props.setAlarms(this.state.timerList);\n                    this.props.refreshAlarms();\n                }\n            });\n        }\n    }\n    addRemoveTimeout(timerId: number, whichTask: string) {\n        // This method has 2 entry points:\n            // initializeState()  // ID is passed in (for each Timer item)\n            // toggleTimeout()    // ID is passed in\n\n        const entryId = timerId;\n\n        if (whichTask === 'remove') {\n            this.deleteTimeout(entryId);        //                    setTimeout delay is...\n\n        } else if (whichTask === 'update') {\n            this.updateTimeout(entryId);        // no 2nd param       (...based on current time)\n\n        } else if (whichTask === 'snooze') {\n            this.updateTimeout(entryId, true);  // 2nd param = snooze (...set based on state.snoozeTime)\n\n        } else { // add | init\n            this.createTimeout(entryId);        //                    (...set based on <form> submit values & cur time)\n        }\n    }\n    deleteTimeout(entryId: number, clearall?: boolean) {\n        // This method has 1 entry point:\n            // addRemoveTimeout()\n\n        let newTimeoutList = this.state.timeoutList.slice(),\n            newTimerDisplayList = this.state.timerDisplayList,\n            timeoutTimerId: number;\n\n        // timeoutList[] will have 2 entries for each timeout\n            // [\n            //     {id: 0, timer: 15}, <-- Modal-prompt setTimeout ('pop-up alerts')\n            //     {id: 0, timer: 24}, <-- Every-second setTimeout ('visual counter')\n            //     {id: 1, timer: 32}, <-- Modal-prompt setTimeout\n            //     {id: 1, timer: 45}  <-- Every-second setTimeout\n            // ]\n\n        newTimeoutList.forEach( (elem: {id: number, timer: number}, idx: number) => {\n            if (elem.id === entryId) {\n                timeoutTimerId = elem.timer;\n                newTimeoutList.splice(idx, 1);\n                window.clearTimeout(elem.timer);\n            }\n        });\n        this.setState({timeoutList: newTimeoutList});\n\n        // timerDisplayList[]\n            // [\n            //     {id: 24, destination: targetDateInMilliseconds}, <--\n            //     {id: 45, destination: targetDateInMilliseconds}  <--\n            // ]\n                    // 'id' is this sibling timeout's Timer ID;\n                    // 'destination' is current date/time plus timeDiff\n\n        newTimerDisplayList.forEach( (elem: {id: number}, idx: number) => {\n            if (elem.id === timeoutTimerId) {\n                newTimerDisplayList.splice(idx, 1);\n                window.clearTimeout(timeoutTimerId);\n            }\n        });\n        this.setState({ timerDisplayList: newTimerDisplayList });\n    }\n    createTimeout(entryId: number) {\n        // This method has 2 entry points:\n            // addRemoveTimeout()\n            // addToTimeoutQueue()\n\n        const newTimerList = this.state.timerList,\n              timerEntry = newTimerList.find(                     // To satisfy TS: An exclamation is added to .find()!\n                (elem: {id: number}) => (elem.id === entryId) )!, // Method not called unless `timerList` is populated.\n              timerPresetTargetTime = timerEntry.presetTargetTime,\n              timerHour = parseInt(timerEntry.timeOfDay.split(':')[0], 10),\n              timerMinute = parseInt(timerEntry.timeOfDay.split(':')[1], 10),\n              timerCycle = timerEntry.cycle;\n\n        let newTimeoutList = this.state.timeoutList,\n            newTimerDisplayList = this.state.timerDisplayList,\n            newTimeout,\n            newTimeoutEntry,\n            newTimerDisplayEntry,\n            targetTime,\n            thisTimeDiff = 0,\n            thisTimeDiffMax = 0;\n\n        // If `timerPresetTargetTime` is > 0, use that as your target instead.\n        thisTimeDiff = (timerPresetTargetTime === 0) ?\n                        this.getTimeDiff(timerHour, timerMinute, timerCycle) :\n                        timerPresetTargetTime - Date.now();\n                        // getTimeDiff: Returns milliseconds between [current time] & [current time + set time + cycle]\n\n        // https://stackoverflow.com/questions/16314750 ...\n            // ^-... /settimeout-fires-immediately-if-the-delay-more-than-2147483648-milliseconds\n            // Per that page: The upper limit of setTimeout is 0x7FFFFFFF (or 2147483647 in decimal)\n            // setTimeout has a 32-bit limit of:\n            //     2147483647 ms = 596.52323528 h = 24.8333 days\n            // 2073600000 ms = 576 hours = 24 days\n        thisTimeDiffMax = (thisTimeDiff > this.state.timeoutMax) ? this.state.timeoutMax : thisTimeDiff;\n\n        // `setTimeout` function will subtract current time from target time and use as ({setTimeout's}, wait) time.\n\n        newTimeout = window.setTimeout(\n            () => {\n                // Add to timeoutQueue\n                    // 1. Add to queue[] (array) when setTimeout time is up;\n                    // 2. Remove from queue[] when closing modal;\n                    // 3. Run queueCheck() to see if any others have entered since modal was up.\n                this.addToTimeoutQueue(entryId);\n            },\n            thisTimeDiffMax\n        );\n\n        // this.state.timerDisplayList[]\n            // [\n            //     {id: 24, destination: now + timeDiff}, <-- 'destination' date/time minus current date/time\n            //     {id: 45, destination: now + timeDiff}  <-- 'destination' date/time minus current date/time\n            // ]\n\n        targetTime = (Date.now() + thisTimeDiff);\n        newTimerDisplayEntry = { id: newTimeout, destination: targetTime };\n        newTimerDisplayList = newTimerDisplayList.concat(newTimerDisplayEntry);\n        this.setState({ timerDisplayList: newTimerDisplayList });\n\n        // timeoutList[] will have 2 entries for each timeout\n            // [\n            //     {id: 0, timer: 15}, <-- Modal-prompt setTimeout ('pop-up alerts')\n            //     {id: 0, timer: 24}, <-- Every-second setTimeout ('visual counter')\n            //     {id: 1, timer: 32}, <-- Modal-prompt setTimeout\n            //     {id: 1, timer: 45}  <-- Every-second setTimeout\n            // ]\n\n        newTimeoutEntry = { id: entryId, timer: newTimeout };\n        newTimeoutList = newTimeoutList.concat(newTimeoutEntry);\n        this.setState({ timeoutList: newTimeoutList });\n    }\n    updateTimeout(entryId: number, isSnooze?: boolean) {\n        // This method has 2 calls from 1 entry point:\n            // addRemoveTimeout()\n\n        let thisTimeDiffUpdate = 0,\n            thisTimeoutWait = 0,\n            thisTimeoutWaitMax = 0;\n\n        const newTimerList = this.state.timerList,\n              timerEntry = newTimerList.find(\n                  (elem: {id: number}) => (elem.id === entryId)\n              )!, // Per TS: Method not called unless `timerList` is populated\n              timerPresetTargetTime = timerEntry.presetTargetTime,\n              timerHour = parseInt(timerEntry.timeOfDay.split(':')[0], 10),\n              timerMinute = parseInt(timerEntry.timeOfDay.split(':')[1], 10),\n              timerCycle = timerEntry.cycle;\n\n        // If `timerPresetTargetTime` is > 0, use that as your target instead.\n        thisTimeDiffUpdate = (timerPresetTargetTime === 0) ?\n                                this.getTimeDiff(timerHour, timerMinute, timerCycle) :\n                                timerPresetTargetTime - Date.now();\n\n        thisTimeoutWait =\n            (isSnooze) ? (this.state.snoozeTime * 60 * 1000) :\n            thisTimeDiffUpdate;\n\n        // 2073600000 ms = 576 hours = 24 days\n        thisTimeoutWaitMax = (thisTimeoutWait > this.state.timeoutMax) ? this.state.timeoutMax : thisTimeoutWait;\n\n        let newTimeoutList = this.state.timeoutList,\n            newTimeout: number,\n            tmpTimerOldId: number;\n\n        // Find existing timer and clear it.\n        for (let i = 0; i < newTimeoutList.length; i++) {\n            if (newTimeoutList[i].id === entryId) {\n                tmpTimerOldId = newTimeoutList[i].timer;\n                clearTimeout(tmpTimerOldId); // Must clear the timeout (cannot rely on it being overwritten.)\n                break;\n            }\n        }\n\n        newTimeout = window.setTimeout(\n            () => { this.addToTimeoutQueue(entryId); },\n            thisTimeoutWaitMax\n        );\n\n        // UPDATE TIMEOUT LIST\n\n        // Update an Object's properties from within an Array\n        newTimeoutList = newTimeoutList.map( (elem: {id: number, timer: number}, idx: number) => {\n            if (elem.id === entryId) {\n                elem.timer = newTimeout;\n            }\n            return elem;\n        });\n        this.setState({ timeoutList: newTimeoutList });\n\n        let newTimerDisplayList = this.state.timerDisplayList,\n            targetTime: number;\n\n        // UPDATE VISUAL COUNTDOWN LIST\n\n        targetTime = (Date.now() + thisTimeoutWait);\n\n        newTimerDisplayList = newTimerDisplayList.map( (elem: {id: number, destination: number}) => {\n            if (elem.id === tmpTimerOldId) {\n                elem.id = newTimeout;\n                elem.destination = targetTime;\n            }\n            return elem;\n        });\n        this.setState({ timerDisplayList: newTimerDisplayList });\n    }\n    addToTimeoutQueue(entryId: number) {\n\n        // Check `entryId` to see if item still has more time remaining. If so, run another .setTimeout()\n        // (This is done due to the setTimeout's 32-bit (e.g., 24 day) limit.)\n\n        const timerEntry = this.state.timerList.find(\n                  (elem: {id: number}) => (elem.id === entryId)\n              )!,\n              timerPresetTargetTime = timerEntry.presetTargetTime,\n              timerHour = parseInt(timerEntry.timeOfDay.split(':')[0], 10),\n              timerMinute = parseInt(timerEntry.timeOfDay.split(':')[1], 10),\n              timerCycle = timerEntry.cycle;\n\n        let thisTimeoutWait = 0,\n            thisTimeoutWaitMax = 0;\n\n        // If `timerPresetTargetTime` is > 0, use that as your target instead.\n        thisTimeoutWait = (timerPresetTargetTime === 0) ?\n                                this.getTimeDiff(timerHour, timerMinute, timerCycle) :\n                                timerPresetTargetTime - Date.now();\n\n        // 2073600000 ms = 576 hours = 24 days\n        thisTimeoutWaitMax = (thisTimeoutWait > this.state.timeoutMax) ? this.state.timeoutMax : thisTimeoutWait;\n\n        // console.log('addToTimeoutQueue: ', thisTimeoutWaitMax, timerEntry);\n        // This console.log helped debug the last error:\n            // Modal not immediately removing timeout, and 'existing expired timeouts' aren't coded for on page init.\n            // Solution: Expire it (the timeOut in the Modal trigger) like the others!\n\n        if (thisTimeoutWaitMax > 0) {\n\n            // It would seem a 24-day `setTimeout()` expired. (This is setTimeout's max timeout period.)\n            // We'll need to run a new setTimeout with a new wait time.\n\n            this.createTimeout(entryId);\n            // this.updateTimeout(entryId); // Timeout has expired and been removed; Nothing to update.\n\n        } else {\n\n            // Let it run its Notification routine to notify the user.\n\n            let tmpTimeoutQueue = this.state.timeoutQueue;\n            tmpTimeoutQueue.push(entryId);\n            this.setState({timeoutQueue: tmpTimeoutQueue}, this.checkTimeoutQueue);\n        }\n    }\n    removeFromTimeoutQueue(entryId: number) {\n        let tmpTimeoutQueue = this.state.timeoutQueue;\n\n        tmpTimeoutQueue.forEach( (elem: number, idx: number) => {\n            if (elem === entryId) {\n                tmpTimeoutQueue.splice(idx, 1);\n            }\n        });\n        this.setState({timeoutQueue: tmpTimeoutQueue}, this.checkTimeoutQueue);\n    }\n    checkTimeoutQueue() {\n        // get queue, get first[0] id in queue\n        // set [state]modal contents (which will show modal with showModal: true)\n\n        let tmpTimeoutQueue = this.state.timeoutQueue;\n\n        if (tmpTimeoutQueue.length > 0) {\n            this.setNotification(tmpTimeoutQueue[0]);\n        }\n    }\n    setNotification(entryId: number) {\n        const timerEntry = this.state.timerList.find(\n                  (entry: {id: number}) => (entry.id === entryId)\n              )!; // For TS: Method not called unless `timerList` is populated.\n\n        if (timerEntry) {\n            this.setState(\n                {\n                    modalTitle: timerEntry.title,\n                    modalTimerId: timerEntry.id\n                },\n                () => this.showNotification(entryId)\n            );\n        }\n    }\n    protected getTimeDiffUpdate(tHour: number, tMinute: number, timerCycle: number): number {\n\n        let tmpDate = new Date(),\n            timerDate = tmpDate.getDate(),\n            timerHour = tHour,\n            timerMinute = tMinute,\n            addDate = 0,\n            addHours = 0,\n            addMinutes = 0,\n            nowDate,\n            nowSetTime,\n            futureSetTime,\n            timeToSetAhead = 0;\n\n        const currentMinutes = tmpDate.getMinutes();\n\n        tmpDate.setMilliseconds(0);\n        tmpDate.setSeconds(0);\n\n            // 'cycle' === '0: daily'\n            // 'cycle' === '1: hourly'\n            // 'cycle' === '2: minute'\n\n        if (timerCycle === 0) {\n            // tmpDate.setDate(tmpDate.getDate() + 1)\n\n            tmpDate.setMinutes(timerMinute, 0, 0);\n            tmpDate.setHours(timerHour);\n\n            if (timerDate === tmpDate.getDate()) {              // 15 = 15\n                addDate = 1;\n            } else {                                            // If not equal, just add a day to current day\n                addDate = tmpDate.getDate() + 1;\n            }\n\n        } else if (timerCycle === 1) {\n            // tmpDate.setHours(tmpDate.getHours() + 1)\n\n            // tH   cH -- (tH: timeoutHour, cH: currentHour)\n            // 18 < 00 -- addHours = 24 + (timerMHour - tmpDate.getMHours()) + 1\n            // 18 = 01 -- addHours = 1\n            // 18 > 00 -- addHours = (timerMHour - tmpDate.getMHours()) + 1\n\n            tmpDate.setMinutes(timerMinute, 0, 0); // I believe this just zeros it out, and doesn't inc/dec hours.\n\n            if (timerMinute <= currentMinutes) {\n\n                // if (timerHour < tmpDate.getHours()) {                   // 18 < 21 | 1 < 2\n                // } else if (timerHour === tmpDate.getHours()) {          // 18 = 18\n                // } else if (timerHour > tmpDate.getHours()) {            // 18 > 15 | 2 > 1\n                //     // addHours = (timerHour - tmpDate.getHours()) + 1\n                // }\n                addHours = 1;\n            }\n\n        } else if (timerCycle === 2) {\n            // tmpDate.setMinutes(tmpDate.getMinutes() + 1)\n\n            addMinutes = 1;\n        }\n\n        tmpDate.setMinutes(tmpDate.getMinutes() + addMinutes);\n        tmpDate.setHours(tmpDate.getHours() + addHours);\n        tmpDate.setDate(tmpDate.getDate() + addDate);\n\n        futureSetTime = tmpDate.getTime();           // Future milliseconds\n\n        nowDate = new Date();\n        nowSetTime = nowDate.getTime();              // Current milliseconds\n\n        timeToSetAhead = futureSetTime - nowSetTime;\n            // Future milliseconds - now() milliseconds +> Target Hours +> Target Minutes\n\n        return timeToSetAhead;\n    }\n    protected getTimeDiff(tHour: number, tMinute: number, timerCycle: number) {\n\n        let timerHour = tHour,\n            timerMinute = tMinute,\n            tmpDate = new Date(),\n            addMinutes = 0,\n            addHours = 0,\n            nowDate,\n            nowSetTime,\n            futureSetTime,\n            timeToSetAhead = 0;\n\n        const currentMinutes = tmpDate.getMinutes();\n\n        tmpDate.setMilliseconds(0);\n        tmpDate.setSeconds(0);\n\n        // 'cycle' === '0: daily'\n        // 'cycle' === '1: hourly'\n        // 'cycle' === '2: minute'\n\n        if (timerMinute < tmpDate.getMinutes()) {               // :30 < :45 | 19 < 20 | 59\n\n            addMinutes = 60 + (timerMinute - tmpDate.getMinutes());\n\n        } else if (timerMinute === tmpDate.getMinutes()) {      // :30 = :30\n\n            if (timerCycle === 0 || timerCycle === 1) {\n                addMinutes = 0;\n            } else {\n                addMinutes = 1;\n            }\n\n        } else if (timerMinute > tmpDate.getMinutes()) {        // :30 > :15\n\n            addMinutes = (timerMinute - tmpDate.getMinutes());\n        }\n\n        tmpDate.setMinutes(tmpDate.getMinutes() + addMinutes);\n\n        if (timerHour < tmpDate.getHours()) {                   // 18 < 21\n\n            addHours = 24 + (timerHour - tmpDate.getHours());\n\n        } else if (timerHour === tmpDate.getHours()) {          // 18 = 18 | 3 = (2 + 1)\n\n            // console.log('[...]', timerMinute, '<=', tmpDate.getMinutes(), '<=', currentMinutes)\n            // ^---< was having trouble per testing note 3 lines down : Determined bad comparison\n\n            //                         tT      cT\n            // 31 \"<=\" 32 \"|\" 1  ===  3:31 <= 2:32  ===\n\n            if (timerMinute === currentMinutes) {\n                // Changed from [tmpDate.getMinutes()] to [currentMinutes]\n                    // Due to test: (current time) 03:52 ==> (target time) 03:53\n                    // 1 minute ahead resulted in (+1 hour +1 minute) ahead\n\n                if (timerCycle === 0) {\n                    addHours = 24;\n                } else if (timerCycle === 1) {\n                    addHours = 0;\n                } else {\n                    addHours = 0;\n                }\n            } else {\n                addHours = 0;\n            }\n\n        } else if (timerHour > tmpDate.getHours()) {            // 18 > 15\n\n            addHours = (timerHour - tmpDate.getHours());\n        }\n\n        addHours += timerHour;\n\n        tmpDate.setHours(tmpDate.getHours() + addHours);\n\n        futureSetTime = tmpDate.getTime();                      // Future milliseconds\n\n        nowDate = new Date();\n\n            // nowDate.setMilliseconds(0)\n                // Don't need to zero this out.\n\n            // nowDate.setSeconds(0)\n                // Don't zero\n                // Use current seconds to allow for 'same-minute' execution\n                // I.e., if timer is set within the current minute,\n                    // but current time is 30 seconds before the target 'timerMinute',\n                    // it'll wait that first 30 seconds... not a minute and 30 seconds.\n\n        nowSetTime = nowDate.getTime();              // Current milliseconds\n\n        timeToSetAhead = futureSetTime - nowSetTime;\n            // Future milliseconds - now() milliseconds +> Target Hours +> Target Minutes\n\n            // [getTimeDiff] AAA double-check with ZZZ (below) 24 0 0 0\n            // [getTimeDiff] tmpDate PRE seconds set           Wed Jul 12 2017 00:24:54 GMT-0700 (Pacific Daylight Time)\n            // [getTimeDiff] tmpDate POST seconds set          Wed Jul 12 2017 00:24:00 GMT-0700 (Pacific Daylight Time)\n            // [getTimeDiff] addMinutes                    36  Wed Jul 12 2017 01:00:00 GMT-0700 (Pacific Daylight Time)\n            // [getTimeDiff] addHours                      23  Thu Jul 13 2017 00:00:00 GMT-0700 (Pacific Daylight Time)\n            // [getTimeDiff] ZZZ Double check same as AAA      24 0 0 0\n            // [tmpDate]                                       Thu Jul 13 2017 00:00:00 GMT-0700 (Pacific Daylight Time)\n            // [nowDate]                                       Wed Jul 12 2017 00:24:54 GMT-0700 (Pacific Daylight Time)\n            // [nowSetTime]                                    1499844294219\n            // [futureSetTime]                                 1499929200000\n            // [timeToSetAhead]                                84905781\n\n        return timeToSetAhead;\n    }\n    toggleTimeout(timerId: number, onOff: string) {\n        // This method has 4 entry points:\n            // setTimerCallback()       // ID is highest\n            // <Timer /> checkbox       // ID is passed in\n            // <TimerBox /> alert Modal // ID from Modal: (timerReset && timerSnooze) (callbacks)\n\n        if (onOff === 'on') {                           // <Form /> Add -> setTimer() -> setTimerCallback()\n            this.addRemoveTimeout(timerId, 'add');\n        } else if (onOff === 'off') {                   // timerList[] -> <Timer /> -> checkbox\n            this.addRemoveTimeout(timerId, 'remove');\n        } else if (onOff === 'snooze') {                // <Modal /> -> Snooze\n            this.addRemoveTimeout(timerId, 'snooze');\n        } else {                                        // <Modal /> -> Done (for now)\n            this.addRemoveTimeout(timerId, 'update');\n        }\n\n        // Update Global Timer List - Set timer on/off (active/non-active)\n            // Timer checkbox display (in Timer Listing)\n            //\n        if (onOff !== 'update' && onOff !== 'snooze') {\n            // Added this condition because don't think we need to run this entire section of code if it's an 'update'\n            // ('active' state should already be 'true' -- Just need to update the timer's new Timout ID)\n\n            const newTimerList = this.state.timerList.map( (elem, idx: number) => {\n                    if (elem.id === timerId) {\n                        elem.active = (onOff === 'on') ? true : false;\n                        // elem.active = (onOff === 'on' || onOff === 'update') ? true : false\n                    }\n                    return elem;\n                  });\n\n            this.setState({ timerList: newTimerList }, () => {\n                setStorageItem(localStorage, 'timerList', JSON.stringify(newTimerList));\n                this.props.setAlarms(this.state.timerList);\n            });\n        }\n    }\n    timerSnooze(entryId: number) {\n        //\n        this.setState({ showModal: false }, () => { // This will turn off the modal,\n            this.removeFromTimeoutQueue(entryId);   //  then remove the entry from the timeoutQueue.\n            this.toggleTimeout(entryId, 'snooze');  //  then this will setup a new setTimeout, which, when done, will\n                                                    //  add this entry back into the timeoutQueue\n\n                                                    // This should be run after the removal of the entry from the\n                                                    // timeoutQueue (else it'll remove this entry).\n\n                                                    // This should not pose an issue unless the setTimeout execution is\n                                                    // less than the few milliseconds it takes for the\n                                                    // 'removeFromTimeoutQueue()' method above to remove it\n                                                    // from the queue first.\n        });\n    }\n    timerReset(entryId?: number) {\n        //\n        const thisEntryId = entryId || this.state.modalTimerId;\n\n        this.setState({ showModal: false }, () => {     // This will turn off the modal,\n            this.removeFromTimeoutQueue(thisEntryId);   // then remove the entry from the timeoutQueue.\n\n            let thisElem = this.state.timerList.find(elem => elem.id === thisEntryId)!;\n\n            if (thisElem.presetTargetTime === 0) {  // For Timer items (no preset time)\n\n                this.toggleTimeout(thisEntryId, 'update');  // this will setup a new setTimeout, which, when done,\n                                                            // will add this entry back into the timeoutQueue\n\n                                                    // This should be run after the removal of the entry from the\n                                                    // timeoutQueue (else it'll remove this entry).\n\n                                                    // This should not pose an issue unless the setTimeout execution is\n                                                    // less than the few milliseconds it takes for the\n                                                    // 'removeFromTimeoutQueue()' method above to remove it\n                                                    // from the queue first.\n            } else {\n\n                this.removeTimer(thisEntryId, true);\n            }\n        });\n    }\n    timerDisable(entryId: number) {\n        // This was refactored at some point.\n        // Should be able to point the JSX callbacks to `timerReset` directly.\n        this.timerReset(entryId);\n    }\n    setSnooze(snoozeTime: number) {\n        //\n        this.setState(\n            { snoozeTime: snoozeTime },\n            () => {\n                setStorageItem(localStorage, 'snoozeTime', snoozeTime.toString());\n            }\n        );\n    }\n    showNotification(entryId: number) {\n\n        // When 'Expired To Be' is used as a Chrome extension, it uses the `chrome.alarms` API.\n\n        // Notification Options\n        // [ ] alerts\n        // [ ] notifications\n        // [ ] modals (passive)\n        // [ ] none\n        // all include:\n            // change tab: title\n            // change tab: icon\n\n        this.props.updatePassiveNotification();\n\n        if (this.props.prefs.prefNotification === 'modals') {\n            this.timerReset(entryId);\n\n            // @TOCHECK: This \"could\" throw an error. [Follow-up: It did.]\n            // Could not get `timerReset` to work with 'alerts' and 'notifications'\n            // when setting `timerReset` inside their callbacks (as 'modals' does).\n            // A check for 'active -but- expired' timeouts isn't done on page init.\n            this.setState({ showModal: true });\n\n        } else if (this.props.prefs.prefNotification === 'alerts') {\n            this.timerReset(entryId);\n\n            setTimeout(\n                () => {\n                    alert(this.state.alarmMsg);\n                },\n                100);\n\n        } else if (this.props.prefs.prefNotification === 'notifications') {\n            this.timerReset(entryId);\n\n            // Resetting timer first, so no use for a callback (below). Tried setting\n            // `timerReset` inside the callback, but it didn't like it much (although\n            // it could have been due to @DEBUG `getBetween` being manually set to 1).\n            this.props.triggerAlarm(entryId);\n            // @MOVED: Catch Resolve and Reject\n\n            // this.props.triggerAlarm(entryId).then( result => {\n            //     console.log('triggerAlarm: ', result);\n            //     // @TOMAYBE: Only reset if \"OK\" was clicked (not the 'X')\n            // });\n\n        } else {\n            // None\n            this.timerReset(entryId);\n        }\n    }\n    resetModal() {\n        this.setState({ showModal: false });\n    }\n    render() {\n        const SettingsFormProps = {\n                titleCount: this.state.titleCount,\n                titleTemp: this.state.titleTemp,\n                countHours: this.state.countHours,\n                countMinutes: this.state.countMinutes,\n                stepCountMinutes: this.state.stepCountMinutes,\n                entryCycleList: this.state.entryCycleList,\n                setTimer: this.setTimer,\n              },\n              sClass1 = `field-col settings-form-col `,\n              sClass2 = `${this.props.prefs.allowTimers === false && 'hidden'}`,\n              sClass = sClass1 + sClass2;\n\n        if (this.props.prefs.showPanel === true) {\n            return (\n                <div>\n                    <main className=\"content\">{this.props.children}\n                        <Row className={'show-grid'}>\n                            <Col\n                                xs={12}\n                                sm={5}\n                                md={5}\n                                className={sClass}\n                            >\n                                <SettingsForm {...SettingsFormProps} />\n                            </Col>\n                            <Col\n                                xsOffset={1}\n                                xs={10}\n                                smOffset={0}\n                                sm={7}\n                                md={7}\n                                className={`field-col timer-list`}\n                                // className={`field-col timer-list ${this.state.timerList.length === 0 && 'hidden'}`}\n                            >\n                                <Timers\n                                    removeTimer={this.removeTimer}\n                                    toggleTimeout={this.toggleTimeout}\n                                    timerList={this.state.timerList}\n                                    timeoutList={this.state.timeoutList}\n                                    timerDisplayList={this.state.timerDisplayList}\n                                    entryCycleList={this.state.entryCycleList}\n                                    showSeconds={this.state.showSeconds}\n                                />\n                            </Col>\n                        </Row>\n                        <ul className={sClass}>\n                            <li className=\"padTopLi2\">\n                                <span className=\"timer-options\">[Setting]</span>&nbsp;\n                                Snooze delay time (in minutes; for future snoozes):&nbsp;\n                                <SnoozeForm snoozeTime={this.state.snoozeTime} setSnooze={this.setSnooze} />\n                            </li>\n                            <li className=\"padTopLi\">\n                                When a timer is created, the timer will be initially set to\n                                the next available time from when the time is set based on the 'cycle' selection.\n                            </li>\n                        </ul>\n                        <TimerAlertPrompt\n                            show={this.state.showModal}\n                            timerList={this.state.timerList}\n                            entryCycleList={this.state.entryCycleList}\n                            modalTimerId={this.state.modalTimerId}\n                            modalTitle={this.state.modalTitle}\n                            timerReset={this.timerReset}\n                            timerDisable={this.timerDisable}\n                            timerSnooze={this.timerSnooze}\n                            snoozeTime={this.state.snoozeTime}\n                            alarmMsg={this.state.alarmMsg}\n                            resetModal={this.resetModal}\n                            // hideDelete={false}\n                            // userDelete={this.userDelete}\n                        />\n                    </main>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <TimerAlertPrompt\n                        show={this.state.showModal}\n                        timerList={this.state.timerList}\n                        entryCycleList={this.state.entryCycleList}\n                        modalTimerId={this.state.modalTimerId}\n                        modalTitle={this.state.modalTitle}\n                        timerReset={this.timerReset}\n                        timerDisable={this.timerDisable}\n                        timerSnooze={this.timerSnooze}\n                        snoozeTime={this.state.snoozeTime}\n                        alarmMsg={this.state.alarmMsg}\n                        resetModal={this.resetModal}\n                        // hideDelete={false}\n                        // userDelete={this.userDelete}\n                    />\n                </div>\n            );\n        }\n    }\n    private getLastId() {\n        const lastId = this.state.timerList.reduce(\n            (agg: number, curObj: {id: number}) => (curObj.id > agg) ? curObj.id : agg, 0 );\n\n        return lastId;\n    }\n    private setTimerCallback() {\n        const lastId = this.getLastId();\n        this.toggleTimeout(lastId, 'on'); // 'addRemoveTimeout' is called from 'toggleTimeout'\n    }\n    private updateTimerCallback(entryId: number) {\n        this.toggleTimeout(entryId, 'update'); // 'addRemoveTimeout' is called from 'toggleTimeout'\n    }\n}\n\n/*\n * INTERFACES\n */\ninterface TimerListState {\n    id: number;\n    title: string;\n    presetTargetTime: number;\n    timeOfDay: string;\n    cycle: number;\n    active: boolean;\n}\n\ninterface TimeoutListState {\n    id: number;\n    timer: number;\n}\n\ninterface TimerDisplayListState {\n    id: number;\n    destination: number;\n}\n\ninterface TimerBoxState {\n    timerList: TimerListState[];               // A list of timers:\n                                               //     { id: 0, title: '', presetTargetTime: 0,\n                                               //       timeOfDay: '00:00', cycle: 0 }\n    timeoutList: TimeoutListState[];           // A list of active timers -- with Timeout ID: { id: 0, timer: 0 }\n                                               // timeoutList[] will have 2 entries for each timeout\n                                               // [\n                                               //     {id: 0, timer: 15}, <-- Modal-prompt setTimeout ('pop-up alerts')\n                                               //     {id: 0, timer: 24}, <-- Every-second setTimeout ('visual counter')\n                                               //     {id: 1, timer: 32}, <-- Modal-prompt setTimeout\n                                               //     {id: 1, timer: 45}  <-- Every-second setTimeout\n                                               // ]\n    timeoutQueue: number[];                    // A list of completed timeouts going through the 'modal' process.\n    timerDisplayList: TimerDisplayListState[]; // 1-second timeouts that update set (stateless) <TimeDisplay />s.\n                                               // timerDisplayList[]\n                                               // --> 'id' is this sibling timeout's Timer ID;\n                                               //     'destination' is current date/time plus timeDiff\n                                               // [\n                                               //     {id: 24, destination: targetDateInMilliseconds},\n                                               //     {id: 45, destination: targetDateInMilliseconds}\n                                               // ]\n    titleCount: number;                         // 20,\n    titleTemp: string;                          // 'Watch my show!',\n    countHours: number;                         // 24,\n    countMinutes: number;                       // 60,\n    stepCountMinutes: number;                   // 5,\n    snoozeTime: number;                         // stateSnoozeTime,\n    entryCycleList: string[];                   // ['daily','hourly','every minute'],\n    showModal: boolean;                         // false,\n    modalTitle: string;                         // '',\n    modalTimerId: number;                       // '',\n    showSeconds: boolean;                       // stateShowSeconds,\n    currentTimerId: number;\n    alarmMsg: string;                           // Default message for alarms.\n    timeoutMax: number;                         // 24 days is setTimeout's 32-bit max.\n}\n\ninterface TimerBoxProps {\n    ourExpirationItems: ExpirationItems[];\n    setAlarms: (stateTimerList: TimerListState[]) => void;\n    refreshAlarms: () => void;\n    prefs: Prefs;\n    triggerAlarm: (timerId: number) => void;    // Promise<string>;\n    updatePassiveNotification: () => void;      // Update browser tab icon and title.\n    // resetPassiveNotification: () => void;    // Reset browser tab icon and title.\n}\n\ninterface ExpirationItems {\n    whichEvent: string;   // \"add\"\n    expiredId: number;    // 2\n    entryTitle: string;   // \"x2b-2\"\n    entryPresetTargetTime: number; // 0 || milliseconds to target date's midnight.\n    entryHours: number;   // 552   // [0|24|48|...] // 552 / 24 = 23 (days)\n    entryMinutes: number; // 0\n    entryCycle: number;   // 0     // 0: daily // @TODO: allow to override snooze; off|on[daily|hourly]\n}\n\ninterface Prefs {\n    showPanel: boolean;\n    allowTimers: boolean;\n    prefNotification: string; // 'modals', 'alerts', 'notifications', 'none'\n}\n\nexport default TimerBox;","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport './index.css';\n\n// // // // // // // // // //\n// [TimerBox.js]\n//\nimport TimerBox from './components/TimerBox';\n\n/**\n * [TimerBox] Alarm API Usage Details:\n *\n * https://github.com/KDCinfo/expired-to-be/src\n *\n */\n\n/**\n *\n * All [TypeScript Interfaces] are at the bottom of this file.\n *\n */\n\nclass App extends React.Component<AppProps, {}> {\n\n  render() {\n    return (\n      <div className=\"appz\">\n        <TimerBox\n          ourExpirationItems={this.props.ourExpirationItems}\n          setAlarms={this.props.setAlarms}\n          refreshAlarms={this.props.refreshAlarms}\n          prefs={this.props.prefs}\n          triggerAlarm={this.props.triggerAlarm}\n          updatePassiveNotification={this.props.updatePassiveNotification}\n        />\n      </div>\n    );\n  }\n}\n\n// `reRender` is to paint the TimerBox; initially and post-alarm actions.\n(window as any).reRender = () => {\n    ReactDOM.render(\n      <App\n        ourExpirationItems={(window as any).ourExpirations.currentItems()}\n        setAlarms={(window as any).ourExpirations.setAlarms}\n        refreshAlarms={(window as any).ourExpirations.refreshAlarms}\n        prefs={(window as any).ourExpirations.getPrefs()}\n        triggerAlarm={(window as any).ourExpirations.triggerAlarm}\n        updatePassiveNotification={(window as any).ourExpirations.updatePassiveNotification}\n      />,\n      document.getElementById('root') as HTMLElement\n    );\n};\n\n// `getPopup` will render the Chrome extension's HTML, then it will load the extension's JS script file.\nconst getPopup = () => {\n  let domApplyTo = document.getElementById('web-root') as HTMLElement;\n\n  async function fetchAsync(getUrl: string) {\n    let response = await fetch(getUrl, { method: 'GET' });\n    let data = await response.text();\n    return data;\n  }\n\n  const initParser = new DOMParser(),\n        nowGetScript = () => {\n          let popupScript = document.createElement('script');\n          // popupScript.src = '%PUBLIC_URL%/extensions/chrome/popup.js';\n          popupScript.src = 'extensions/chrome/popup.js';\n          popupScript.async = false;                        // This is on purpose; we need this available immediately.\n          domApplyTo.appendChild(popupScript);              // console.log('popup.js is here.');\n        },\n        nowGetPrefsScript = () => {\n          let popupPrefsScript = document.createElement('script');\n          popupPrefsScript.src = 'extensions/chrome/x2b-prefs.js';\n          popupPrefsScript.async = false;                   // This is on purpose; we need this available immediately.\n          domApplyTo.appendChild(popupPrefsScript);         // console.log('popup.js is here.');\n        },\n        nowGetAboutMenu = () => {\n          let domTopBoxH1 = document.querySelector('#topBox h1') as HTMLElement,\n              domTopBoxH1Parent = domTopBoxH1.parentNode as HTMLElement,\n              aboutMenu = `<div id=\"webapp-help\">\n                  <button type=\"button\" id=\"button-toggle-webapp-help\">About this App</button>\n                  <div id=\"app-message\">\n                    <p>This web app allows for the setting and reminders for 'things that expire'.</p>\n                    <p>In order for the alarm notifications to work, this browser tab should remain open;\n                      but you can continue your browsing activities in other tabs.</p>\n                    <p>If you would prefer to always have it on without having to keep a browser tab open,\n                      you can also run this as a <a\n                        href=\"https://chrome.google.com/webstore/detail/expired-to-be/kamjiblbgmiobifooelpmlkojmadmcan\"\n                      >Chrome browser extension</a>.</p>\n                  </div>\n                </div>`,\n              docAbout = initParser.parseFromString(aboutMenu, 'text/html');\n              // 00 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789|\n\n          domTopBoxH1Parent.insertBefore(\n            docAbout.getElementById('webapp-help') as HTMLElement,\n            domTopBoxH1.nextSibling);\n        },\n        applyPrefs = () => {\n          let x2bApplyTo = document.querySelector('.input-options') as HTMLElement;\n\n          fetchAsync('extensions/chrome/x2b-prefs.html').then( prefData => {\n            const prefsData = prefData.trim(),\n                  docPrefs = initParser.parseFromString(prefsData, 'text/html'),\n                  div1 = docPrefs.querySelectorAll('.x2b')[0],\n                  div2 = docPrefs.querySelectorAll('.x2b')[1];\n\n            x2bApplyTo.appendChild(div1);\n            x2bApplyTo.appendChild(div2);\n\n            // These 2 function calls are both synchronous.\n            nowGetPrefsScript();\n            nowGetAboutMenu();\n\n            // console.log('The End. Now for...');\n            // (window as any).reRender(); // Update the Timer App to reflect any new Timers.\n            // ^ This was moved to [x2b-prefs.js] `if (!isEmpty(storedExpiredPrefs)) else...`\n            // A `reRender` cannot happen until [x2b-prefs.js] is loaded; when prefs are set.\n            // Otherwise, alarms will trigger prior to notification preferences being loaded.\n\n          }).catch( e => {\n            console.log('And the --X2B-- catch(e) error is:');\n            console.error(e);\n          });\n        };\n\n  fetchAsync('extensions/chrome/popup.html').then( data => {\n    const dataLeftIdx = data.indexOf('<body>') + 6,\n          dataRightIdx = data.indexOf('<script') - 1,\n          newData = data.substring(dataLeftIdx, dataRightIdx).trim();\n\n    let doc = initParser.parseFromString(newData, 'text/html');\n              // returns an HTMLDocument, which is a Document.\n\n    domApplyTo.appendChild(doc.querySelector('div') as HTMLElement); // console.log('popup.html is here');\n\n    nowGetScript();\n    applyPrefs();\n\n  }).catch( e => {\n    console.log('And the catch(e) error is:');\n    console.error(e);\n  });\n};\n\n// Initial painting of TimerBox App.\n// (window as any).reRender(); // Moved to [x2b-prefs.js] `if (!isEmpty(storedExpiredPrefs)) else ...`\n\n// TimerBox is our (non-Chrome extension) 'Alarms API': We need to let the `reRender` of the TimerBox\n// DOM painting clear the call stack before launching our 'Expired To Be' HTML and its related script.\n//\n// For this, neither `DOMContentLoaded` nor 'window.onload' sufficed, as neither always triggered.\n// document.addEventListener('DOMContentLoaded', (window as any).getPopup, false);\nsetTimeout( () => {\n              getPopup();\n            },\n            100);\n\n/**\n * INTERFACES\n */\ninterface TimerListState {\n  id: number;\n  title: string;\n  presetTargetTime: number;\n  timeOfDay: string;\n  cycle: number;\n  active: boolean;\n}\n\ninterface AppProps {\n  ourExpirationItems: ExpirationItems[];\n  setAlarms: () => TimerListState[];\n  refreshAlarms: () => void;\n  prefs: Prefs;\n  triggerAlarm: (timerId: number) => Promise<string>;\n  updatePassiveNotification: () => void;\n}\n\ninterface ExpirationItems {\n  whichEvent: string;   // whichEvent: \"add\"\n  expiredId: number;    // expiredId: 2\n  entryTitle: string;   // entryTitle: \"x2b-2\"\n  entryPresetTargetTime: number; // 0 or positive futuer date in milliseconds\n  entryHours: number;   // entryHours: 552  // [0|24|48|...] // 552 / 24 = 23 (days)\n  entryMinutes: number; // entryMinutes: 0\n  entryCycle: number;   // entryCycle: 0    // 0: daily // @TODO: allow to override snooze; off|on[daily|hourly]\n}\n\ninterface Prefs {\n  prefHours: number;\n  prefMins: number;\n  prefNotification: string;\n  showPanel: boolean;\n  allowTimers: boolean;\n}\n"],"sourceRoot":""}